import React, { useState, useEffect } from "react";
import "../styles/Puzzle.css";
import Game3 from '../components/Game3.js'
import iron from '../images/thor.png'
import space from "../images/space.jpg"
import Result from '../components/Result'
function Puzzle() {
  let won=["congratulations you have won all infinity stones!!!",
"Your bravery helped to finish the treasure hunt and save the world!!!"]
let lost = ["Oops!!",
  "You were not able to pass the level!",
  "Better luck next time"
]
  let [time,setTime] = useState(180)
  let [mod,callMod] = useState(false)
  let head="level-3"
  let content=[ "welcome to the level-3 ",
  "Iam Thor,I need help to find the weapons in the puzzle in the given time!!",
  "Rules for the Level3- ",
  "Rule1: using the hints provided find the weapons in the puzzle",
  "Rule2: remember time is clciking",
  "Rule3: Find any 3 weapons in time to complete the level",
  "You will be navigated to the next level after the successful completion of the level or directed to the home page",
  "All the best!!"]
  const hint=[
    "1) It is used in a sport",
    "2) It is a tool used to pin the nails",
    "3) It is generated by insects",
    "4) It can used as protection",
    "5) Weapon of IronMan"

  ]
  const words = ["hammer", "shield", "web", "bow", "repulsor"];
  const [grid, setGrid] = useState([]);
  const [selectedLetters, setSelectedLetters] = useState([]);
  const [foundWords, setFoundWords] = useState([]);

  useEffect(() => {
    generateGrid();
  }, []);

  const generateGrid = () => {
    // Define grid dimensions
    const numRows = 10;
    const numCols = 10;

    // Generate grid with random letters
    const alphabet = "abcdefghijklmnopqrstuvwxyz";
    const newGrid = [];
    for (let row = 0; row < numRows; row++) {
      const rowLetters = [];
      for (let col = 0; col < numCols; col++) {
        const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];
        rowLetters.push(randomLetter);
      }
      newGrid.push(rowLetters);
    }

    // Place words in grid
    for (const word of words) {
      const direction = Math.random() < 0.5 ? "horizontal" : "vertical";
      let startRow, startCol;
      if (direction === "horizontal") {
        startRow = Math.floor(Math.random() * numRows);
        startCol = Math.floor(Math.random() * (numCols - word.length + 1));
      } else {
        startRow = Math.floor(Math.random() * (numRows - word.length + 1));
        startCol = Math.floor(Math.random() * numCols);
      }
      for (let i = 0; i < word.length; i++) {
        if (direction === "horizontal") {
          newGrid[startRow][startCol + i] = word[i];
        } else {
          newGrid[startRow + i][startCol] = word[i];
        }
      }
    }

    setGrid(newGrid);
  };

  const [numFoundWords, setNumFoundWords] = useState(0);


  const handleLetterClick = (row, col) => {
    // Check if letter is already selected
    const alreadySelected = selectedLetters.some(
      ({ row: selectedRow, col: selectedCol }) =>
        selectedRow === row && selectedCol === col
    );
  
    if (alreadySelected) {
      // Remove all letters after clicked letter
      const index = selectedLetters.findIndex(
        ({ row: selectedRow, col: selectedCol }) =>
          selectedRow === row && selectedCol === col
      );
      const newSelectedLetters = selectedLetters.slice(0, index);
      setSelectedLetters(newSelectedLetters);
    } else {
      // Add selected letter to list
      const newSelectedLetters = [...selectedLetters, { row, col }];
      setSelectedLetters(newSelectedLetters);
  
      // Check if selected letters make up a word
      const selectedWord = newSelectedLetters
        .map(({ row, col }) => grid[row][col])
        .join("");
      const isFound = words.includes(selectedWord);
  
      if (isFound) {
        setFoundWords([...foundWords, selectedWord]);
        setSelectedLetters([]);
        setNumFoundWords(numFoundWords + 1); // Increment count of found words

      }
    }
  };
  

  const renderCell = (row, col) => {
    const isSelected = selectedLetters.some(
      ({ row: selectedRow, col: selectedCol }) =>
        selectedRow === row && selectedCol === col
    );
  
    const currentSelectedWord = selectedLetters
      .map(({ row, col }) => grid[row][col])
      .join("");
  
    const isFound = foundWords.includes(currentSelectedWord);
  
    const isPartOfSelectedWord = selectedLetters.some(
      ({ row: selectedRow, col: selectedCol }) =>
        selectedRow === row && selectedCol === col
    );
  
    const className = `cell ${isSelected ? "selected" : ""} ${
      isPartOfSelectedWord && isFound ? "word" : ""
    }`;
  
    return (
      <div className={className} onClick={() => handleLetterClick(row, col)}>
        {grid[row][col]}
      </div>
    );
  };
  

  let onCallMod=()=>{
    callMod(true)
  }
  let [gameOver,setGameOver] = useState(false)
  let [win,setWin] = useState(false)



  useEffect(()=>{
    if(time == 1){
      setGameOver(true)
    }
    if(mod==true){
      setTimeout(()=>{
        setTime(e => e-1)
      },1000)
    }

  },[mod,time])



  useEffect(()=>{
    if(numFoundWords ==3){
      setWin(true)
      setGameOver(true)
    }
  },[numFoundWords])

  return (
    
    <div className="game3-main">
                <Game3 content={content} img = {iron} close ={onCallMod} game = "3" head={head}></Game3>
      <div className="puzzle">
      <div className="grid">
        {grid.map((row, rowIndex) =>
          row.map((_, colIndex) => renderCell(rowIndex, colIndex))
        )}
      </div>
        <div className="found-words">
          <h2>
            Found Words:{" "}
            {foundWords.length ===
            0 ? "None yet" : foundWords.join(", ")}
          </h2>
        </div>
      </div>
      <div className="game3-content">
      <h4 className="time">time remaining : {time}</h4>
        <p className="game3-count"> score: {numFoundWords}</p>
        <h1 className="game3-header">Guess the names of the weapons</h1>
        <p className="game3-hint1">here are the hints</p>
          {
            hint.map((e)=>(
              <h1 className="game3-hint1"> {e} </h1>
            ))
          }
        {/* <h1 className="game3-hint2">Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit, sequi?</h1>
        <h1 className="game3-hint3">Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit, sequi?</h1>
        <h1 className="game3-hint4">Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit, sequi?</h1> */}
            
      </div>

      {
            win && <Result res="true" content={won} game="3" img ={iron} stat="won"></Result>
          }
          { !win &&  gameOver && <Result res="false" content = {lost} img={iron} game="1" stat="lost"></Result>}
    </div>
    
);
}

export default Puzzle;